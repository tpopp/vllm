ARG BASE_IMAGE=rocm/pytorch-private:vllm_48_rocm7.0_aiter_0918_1380dc
ARG HIPBLASLT_BRANCH="9176baa4996408fd323ed7c1a1492a09997e8d05"
ARG HIPBLASLT_REPO="https://github.com/ROCm/rocm-libraries.git"
# ARG HIPBLAS_COMMON_BRANCH="9b80ba8e"
# ARG LEGACY_HIPBLASLT_OPTION=
ARG TRITON_BRANCH="57c693b627fe058878ade4163a0a8df95d9fefa1"
ARG TRITON_REPO="https://github.com/ROCm/triton.git"
ARG PYTORCH_BRANCH="rocm7.1_internal_testing-tritonlatest"
ARG PYTORCH_VISION_BRANCH="5dc9e7de"
ARG PYTORCH_REPO="https://github.com/ROCm/pytorch.git"
ARG PYTORCH_VISION_REPO="https://github.com/pytorch/vision.git"
ARG FA_BRANCH="3222ea3"
ARG FA_REPO="https://github.com/Dao-AILab/flash-attention.git"
# ARG AITER_BRANCH="6b92d30de680ec10e1e1463b609ed0f228f999f3"
# ARG AITER_REPO="https://github.com/ROCm/aiter.git"

FROM ${BASE_IMAGE} AS base

ENV PATH=/opt/rocm/llvm/bin:$PATH
ENV ROCM_PATH=/opt/rocm
ENV LD_LIBRARY_PATH=/opt/rocm/lib:/usr/local/lib:
ARG PYTORCH_ROCM_ARCH=gfx942;gfx950
ENV PYTORCH_ROCM_ARCH=${PYTORCH_ROCM_ARCH}
# ENV AITER_ROCM_ARCH=gfx942;gfx950

ARG PYTHON_VERSION=3.12

RUN mkdir -p /app
WORKDIR /app
ENV DEBIAN_FRONTEND=noninteractive

# Install Python and other dependencies
RUN apt-get update -y \
    && apt-get install -y software-properties-common git curl sudo vim less libgfortran5 \
    && for i in 1 2 3; do \
        add-apt-repository -y ppa:deadsnakes/ppa && break || \
        { echo "Attempt $i failed, retrying in 5s..."; sleep 5; }; \
    done \
    && apt-get update -y \
    && apt-get install -y python${PYTHON_VERSION} python${PYTHON_VERSION}-dev python${PYTHON_VERSION}-venv \
       python${PYTHON_VERSION}-lib2to3 python-is-python3  \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${PYTHON_VERSION} 1 \
    && update-alternatives --set python3 /usr/bin/python${PYTHON_VERSION} \
    && ln -sf /usr/bin/python${PYTHON_VERSION}-config /usr/bin/python3-config \
    && curl -sS https://bootstrap.pypa.io/get-pip.py | python${PYTHON_VERSION} \
    && python3 --version && python3 -m pip --version
RUN pip install -U packaging 'cmake<4' ninja wheel 'setuptools<80' pybind11 Cython

# ARG HIPBLASLT_BRANCH
# ARG HIPBLASLT_REPO
# FROM base AS build_hipblaslt
# RUN git clone ${HIPBLASLT_REPO}
# RUN cd rocm-libraries/projects/hipblaslt                                                              \
# && git checkout ${HIPBLASLT_BRANCH}                                                                  \
# && pip install -r tensilelite/requirements.txt                                                       \
# && ./install.sh -cd -a gfx1101                                                                       \
# && BASE_VERSION=$(dpkg-query -W -f='${Version}\n' hipblaslt | cut -d. -f1-3)                         \
# && SO_VERSION=$(echo "${BASE_VERSION}" | cut -d. -f1,2)                                              \
# && ROCM_LIBPATCH_VERSION=$(dpkg-query -W -f='${Version}\n' hipblaslt | cut -d. -f4 | cut -d- -f1)    \
# && DEBIAN_REVISION=$(dpkg-query -W -f='${Version}\n' hipblaslt | sed 's/.*-\([0-9]*\)~.*/\1/')       \
# && UBUNTU_VERSION=$(dpkg-query -W -f='${Version}\n' hipblaslt | sed 's/.*~//')                       \
# && FC=gfortran CXX=/opt/rocm/bin/amdclang++ CC=/opt/rocm/bin/amdclang                                \
#     cmake -B build -S .                                                                              \
#       -DHIPBLASLT_PROJECT_VERSION="${BASE_VERSION}.${ROCM_LIBPATCH_VERSION}"                         \
#       -DHIPBLASLT_SOVERSION="${SO_VERSION}"                                                          \
#       -DCPACK_DEBIAN_PACKAGE_RELEASE="${DEBIAN_REVISION}~${UBUNTU_VERSION}"                          \
#       -DCMAKE_PREFIX_PATH="/opt/rocm/lib/llvm;/opt/rocm"                                 \
#       -DCMAKE_SHARED_LINKER_FLAGS_INIT='-Wl,--enable-new-dtags,--build-id=sha1,--rpath,\$ORIGIN'     \
#       -DCMAKE_EXE_LINKER_FLAGS_INIT='-Wl,--enable-new-dtags,--build-id=sha1,--rpath,\$ORIGIN/../lib' \
#       -DCMAKE_INSTALL_PREFIX="/opt/rocm"                                                      \
#       -DROCM_SYMLINK_LIBS=OFF                                                                        \
#       -DROCM_PATH="/opt/rocm"                                                                  \
#       -DGPU_TARGETS="gfx950;gfx942"                                                                  \
#       -DCMAKE_BUILD_TYPE=Release                                                                     \
#       -DHIPBLASLT_ENABLE_FETCH=ON                                                                    \
#       -DCMAKE_INSTALL_LIBDIR=lib                                                                     \
#       -DBLA_STATIC=ON                                                                                \
# && cmake --build build --target package --parallel                                                   \
# && mkdir -p /app/install && cp build/*.deb /app/install


# ARG HIPBLASLT_BRANCH
# ARG HIPBLAS_COMMON_BRANCH
# # Set to "--legacy_hipblas_direct" for ROCm<=6.2
# ARG LEGACY_HIPBLASLT_OPTION
# RUN git clone https://github.com/ROCm/hipBLAS-common.git
# RUN apt-get remove -y hipblaslt && apt-get autoremove -y && apt-get autoclean -y
# RUN cd hipBLAS-common \
#     && git checkout ${HIPBLAS_COMMON_BRANCH} \
#     && mkdir build \
#     && cd build \
#     && cmake .. \
#     && make package \
#     && dpkg -i ./*.deb
# RUN git clone https://github.com/ROCm/hipBLASLt
# RUN cd hipBLASLt \
#     && git checkout ${HIPBLASLT_BRANCH} \
#     && apt-get install -y llvm-dev \
#     && ./install.sh -dc --architecture ${PYTORCH_ROCM_ARCH} ${LEGACY_HIPBLASLT_OPTION} \
#     && cd build/release \
#     && make package
# RUN mkdir -p /app/install && cp /app/hipBLASLt/build/release/*.deb /app/hipBLAS-common/build/*.deb /app/install

FROM base AS build_triton
ARG TRITON_BRANCH
ARG TRITON_REPO
RUN git clone ${TRITON_REPO}
RUN cd triton \
    && git checkout ${TRITON_BRANCH} \
    && if [ ! -f setup.py ]; then cd python; fi \
    && python3 setup.py bdist_wheel --dist-dir=dist \
    && mkdir -p /app/install && cp dist/triton*.whl /app/install
RUN if [ -d triton/python/triton_kernels ]; then \
    pip install build \
    && cd triton/python/triton_kernels \
    && python3 -m build --wheel && cp dist/triton*.whl /app/install; fi

FROM base AS build_amdsmi
RUN cd /opt/rocm/share/amd_smi \
    && pip wheel . --wheel-dir=dist
RUN mkdir -p /app/install && cp /opt/rocm/share/amd_smi/dist/*.whl /app/install

FROM base AS build_pytorch
ARG PYTORCH_BRANCH
ARG PYTORCH_VISION_BRANCH
ARG PYTORCH_REPO
ARG PYTORCH_VISION_REPO
ARG FA_BRANCH
ARG FA_REPO
RUN git clone ${PYTORCH_REPO} pytorch
RUN cd pytorch && git checkout ${PYTORCH_BRANCH} && \
   pip install -r requirements.txt && git submodule update --init --recursive \
   && python3 tools/amd_build/build_amd.py \
   && CMAKE_PREFIX_PATH=$(python3 -c 'import sys; print(sys.prefix)') python3 setup.py bdist_wheel --dist-dir=dist \
   && pip install dist/*.whl
RUN git clone ${PYTORCH_VISION_REPO} vision
RUN cd vision && git checkout ${PYTORCH_VISION_BRANCH} \
   && python3 setup.py bdist_wheel --dist-dir=dist \
   && pip install dist/*.whl
RUN git clone ${FA_REPO}
RUN cd flash-attention \
    && git checkout ${FA_BRANCH} \
    && git submodule update --init \
    && GPU_ARCHS=$(echo ${PYTORCH_ROCM_ARCH} | sed -e 's/;gfx1[0-9]\{3\}//g') python3 setup.py bdist_wheel --dist-dir=dist
RUN mkdir -p /app/install \
   && cp /app/pytorch/dist/*.whl /app/install \
   && cp /app/vision/dist/*.whl /app/install \
   && cp /app/flash-attention/dist/*.whl /app/install
# RUN mkdir -p /app/install && cp /app/flash-attention/dist/*.whl /app/install

# FROM base AS build_aiter
# ARG AITER_BRANCH
# ARG AITER_REPO
# # RUN --mount=type=bind,from=build_pytorch,src=/app/install/,target=/install \
# #     pip install /install/*.whl
# RUN git clone --recursive ${AITER_REPO}
# RUN cd aiter \
#     && git checkout ${AITER_BRANCH} \
#     && git submodule update --init --recursive \
#     && pip install -r requirements.txt
# RUN pip install pyyaml && cd aiter && PREBUILD_KERNELS=1 GPU_ARCHS=${AITER_ROCM_ARCH} python3 setup.py bdist_wheel --dist-dir=dist && ls /app/aiter/dist/*.whl
# RUN mkdir -p /app/install && cp /app/aiter/dist/*.whl /app/install

FROM base AS debs
RUN mkdir /app/debs
# RUN --mount=type=bind,from=build_hipblaslt,src=/app/install/,target=/install \
#     cp /install/*.deb /app/debs
RUN --mount=type=bind,from=build_triton,src=/app/install/,target=/install \
    cp /install/*.whl /app/debs
RUN --mount=type=bind,from=build_amdsmi,src=/app/install/,target=/install \
    cp /install/*.whl /app/debs
RUN --mount=type=bind,from=build_pytorch,src=/app/install/,target=/install \
    cp /install/*.whl /app/debs
# RUN --mount=type=bind,from=build_aiter,src=/app/install/,target=/install \
#     cp /install/*.whl /app/debs

FROM base AS final
# RUN --mount=type=bind,from=build_hipblaslt,src=/app/install/,target=/install \
#     dpkg --remove --force-depends hipblaslt hipblaslt-dev                                             \
#     && dpkg -i --force-depends /install/*.deb \ 
#     && sed -i 's/, hipblaslt-dev \(.*\), hipcub-dev/, hipcub-dev/g' /var/lib/dpkg/status \
#     && sed -i 's/, hipblaslt \(.*\), hipfft/, hipfft/g' /var/lib/dpkg/status
# RUN --mount=type=bind,from=build_rccl,src=/app/install/,target=/install \
#     dpkg -i /install/*deb \
#     && sed -i 's/, rccl-dev \(.*\), rocalution/, rocalution/g' /var/lib/dpkg/status \
#     && sed -i 's/, rccl \(.*\), rocalution/, rocalution/g' /var/lib/dpkg/status
RUN echo "Entering Base as final"
# RUN echo "triggering uncache"
RUN echo "Uninstalling triton " && pip uninstall -y triton triton_kernels
RUN echo "Uninstalling torch " && pip uninstall -y torch
RUN --mount=type=bind,from=build_triton,src=/app/install/,target=/install \
    pip install /install/*.whl
RUN --mount=type=bind,from=build_amdsmi,src=/app/install/,target=/install \
    pip install /install/*.whl
RUN --mount=type=bind,from=build_pytorch,src=/app/install/,target=/install \
    pip install /install/*.whl
# RUN --mount=type=bind,from=build_aiter,src=/app/install/,target=/install \
#     pip install /install/*.whl

ARG BASE_IMAGE
ARG HIPBLAS_COMMON_BRANCH
ARG HIPBLASLT_BRANCH
ARG LEGACY_HIPBLASLT_OPTION
ARG TRITON_BRANCH
ARG TRITON_REPO
ARG PYTORCH_BRANCH
ARG PYTORCH_VISION_BRANCH
ARG PYTORCH_REPO
ARG PYTORCH_VISION_REPO
ARG FA_BRANCH
ARG FA_REPO
ARG AITER_BRANCH
ARG AITER_REPO
RUN echo "BASE_IMAGE: ${BASE_IMAGE}" > /app/versions.txt \
    && echo "HIPBLAS_COMMON_BRANCH: ${HIPBLAS_COMMON_BRANCH}" >> /app/versions.txt \
    && echo "HIPBLASLT_BRANCH: ${HIPBLASLT_BRANCH}" >> /app/versions.txt \
    && echo "LEGACY_HIPBLASLT_OPTION: ${LEGACY_HIPBLASLT_OPTION}" >> /app/versions.txt \
    && echo "TRITON_BRANCH: ${TRITON_BRANCH}" >> /app/versions.txt \
    && echo "TRITON_REPO: ${TRITON_REPO}" >> /app/versions.txt \
    && echo "PYTORCH_BRANCH: ${PYTORCH_BRANCH}" >> /app/versions.txt \
    && echo "PYTORCH_VISION_BRANCH: ${PYTORCH_VISION_BRANCH}" >> /app/versions.txt \
    && echo "PYTORCH_REPO: ${PYTORCH_REPO}" >> /app/versions.txt \
    && echo "PYTORCH_VISION_REPO: ${PYTORCH_VISION_REPO}" >> /app/versions.txt \
    && echo "FA_BRANCH: ${FA_BRANCH}" >> /app/versions.txt
    # && echo "AITER_BRANCH: ${AITER_BRANCH}" >> /app/versions.txt \
    # && echo "AITER_REPO: ${AITER_REPO}" >> /app/versions.txt
